{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","chartData","chartDayData","getChartData","a","axios","get","res","data","splice","Confirmed","map","e","Date","formData","DayDate","length","Deaths","DayConfirmed","getDayByConfirmed","DayDeaths","getDayByDeaths","console","log","setState","labels","datasets","label","type","fill","borderColor","this","split","i","className","options","title","display","text","fontSize","legend","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sPA8HeA,E,4MAxHbC,MAAQ,CACNC,UAAW,GACXC,aAAc,I,EAwBhBC,a,sBAAe,wCAAAC,EAAA,sEAEGC,IAAMC,IACpB,qDAHW,QAETC,EAFS,QAKTC,KAAKC,QAAQ,GACbC,EAAYH,EAAIC,KAAKG,KAAI,SAACC,GAAD,OAAOA,EAAEF,aAClCG,EAAO,EAAKC,SAASP,EAAIC,KAAKG,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAC3CE,EAAU,EAAKD,SAASP,EAAIC,KAAKG,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAAOJ,OACvD,EACAI,EAAKG,QAEHC,EAASV,EAAIC,KAAKG,KAAI,SAACC,GAAD,OAAOA,EAAEK,UAC/BC,EAAe,EAAKC,kBAAkBZ,EAAIC,KAAKG,KAAI,SAACC,GAAD,OAAOA,EAAEF,cAC5DU,EAAY,EAAKC,eAAed,EAAIC,KAAKG,KAAI,SAACC,GAAD,OAAOA,EAAEK,WAC1DK,QAAQC,IAAIR,GACZO,QAAQC,IAAIH,GAEZ,EAAKI,SAAS,CACZvB,UAAW,CACTwB,OAAQZ,EACRa,SAAU,CACR,CACEC,MAAO,QACPC,KAAM,OACNpB,KAAMS,EACNY,MAAM,EACNC,YAAa,sBAEf,CACEH,MAAO,QACPC,KAAM,OACNpB,KAAME,EACNmB,MAAM,EACNC,YAAa,CAAC,4BAIpB5B,aAAc,CACZuB,OAAQV,EACRW,SAAU,CACR,CACEC,MAAO,YACPC,KAAM,OACNC,MAAM,EACNrB,KAAMY,EACNU,YAAa,sBAEf,CACEH,MAAO,YACPC,KAAM,OACNC,MAAM,EACNrB,KAAMU,EACNY,YAAa,6BArDR,4C,6KApBbC,KAAK5B,e,qIAEEK,GACP,OAAOA,EAAKG,KAAI,SAACC,GAAD,OAAOA,EAAEoB,MAAM,KAAK,Q,wCAEpBxB,GAEhB,IADA,IAAIJ,EAAI,GACC6B,EAAI,EAAGA,EAAIzB,EAAKQ,OAAQiB,IAC/B7B,EAAE6B,GAAKzB,EAAKyB,EAAI,GAAKzB,EAAKyB,GAE5B,OAAO7B,I,qCAEMI,GAEb,IADA,IAAIJ,EAAI,GACC6B,EAAI,EAAGA,EAAIzB,EAAKQ,OAAQiB,IAC/B7B,EAAE6B,GAAKzB,EAAKyB,EAAI,GAAKzB,EAAKyB,GAE5B,OAAO7B,I,+BAgEP,OACE,yBAAK8B,UAAU,OACb,kBAAC,IAAD,CACE1B,KAAMuB,KAAK/B,MAAMC,UACjBkC,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAM,uCACNC,SAAU,IAEZC,OAAQ,CACNH,SAAS,MAIf,kBAAC,IAAD,CACE7B,KAAMuB,KAAK/B,MAAME,aACjBiC,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAM,iCACNC,SAAU,IAEZC,OAAQ,CACNH,SAAS,W,GAhHLI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.afaa494e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    chartData: {},\n    chartDayData: {},\n  };\n\n  async componentWillMount() {\n    this.getChartData();\n  }\n  formData(data) {\n    return data.map((e) => e.split(\"T\")[0]);\n  }\n  getDayByConfirmed(data) {\n    let a = [];\n    for (let i = 0; i < data.length; i++) {\n      a[i] = data[i + 1] - data[i];\n    }\n    return a;\n  }\n  getDayByDeaths(data) {\n    let a = [];\n    for (let i = 0; i < data.length; i++) {\n      a[i] = data[i + 1] - data[i];\n    }\n    return a;\n  }\n\n  getChartData = async () => {\n    //https://api.covid19api.com/dayone/country/hungary\n    let res = await axios.get(\n      \"https://api.covid19api.com/dayone/country/hungary\"\n    );\n    res.data.splice(-1);\n    let Confirmed = res.data.map((e) => e.Confirmed);\n    let Date = this.formData(res.data.map((e) => e.Date));\n    let DayDate = this.formData(res.data.map((e) => e.Date)).splice(\n      1,\n      Date.length\n    );\n    let Deaths = res.data.map((e) => e.Deaths);\n    let DayConfirmed = this.getDayByConfirmed(res.data.map((e) => e.Confirmed));\n    let DayDeaths = this.getDayByDeaths(res.data.map((e) => e.Deaths));\n    console.log(DayDate);\n    console.log(DayDeaths);\n\n    this.setState({\n      chartData: {\n        labels: Date,\n        datasets: [\n          {\n            label: \"Deads\",\n            type: \"line\",\n            data: Deaths,\n            fill: false,\n            borderColor: \"rgba(255,99,132,1)\",\n          },\n          {\n            label: \"Cases\",\n            type: \"line\",\n            data: Confirmed,\n            fill: false,\n            borderColor: [\"rgba(54, 162, 235, 1)\"],\n          },\n        ],\n      },\n      chartDayData: {\n        labels: DayDate,\n        datasets: [\n          {\n            label: \"New deads\",\n            type: \"line\",\n            fill: false,\n            data: DayDeaths,\n            borderColor: \"rgba(255,99,132,1)\",\n          },\n          {\n            label: \"New cases\",\n            type: \"line\",\n            fill: false,\n            data: DayConfirmed,\n            borderColor: \"rgba(54, 162, 235, 1)\",\n          },\n        ],\n      },\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Line\n          data={this.state.chartData}\n          options={{\n            title: {\n              display: true,\n              text: \"Covid-19 cases and deaths in Hungary\",\n              fontSize: 25,\n            },\n            legend: {\n              display: true,\n            },\n          }}\n        />\n        <Line\n          data={this.state.chartDayData}\n          options={{\n            title: {\n              display: true,\n              text: \"Covid-19 new cases in Hungary \",\n              fontSize: 25,\n            },\n            legend: {\n              display: true,\n            },\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}